<?xml version="1.0" encoding="UTF-8"?>
<!--
The MIT License

Copyright 2014 CloudBees, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:l="/lib/layout" xmlns:f="/lib/form">
    <l:layout title="In-process Script Approval" permission="${app.RUN_SCRIPTS}">
        <st:include page="sidepanel.jelly" it="${app}"/>
        <l:main-panel>
            <script>
                var mgr = <st:bind value="${it}"/>;
                function hideScript(hash) {
                    $('ps-' + hash).style.display = 'none';
                }
                function approveScript(hash) {
                    mgr.approveScript(hash);
                    hideScript(hash);
                }
                function denyScript(hash) {
                    mgr.denyScript(hash);
                    hideScript(hash);
                }
                function hideSignature(hash) {
                    $('s-' + hash).style.display = 'none';
                }
                function updateApprovedSignatures(r) {
                    var both = r.responseObject();
                    $('approvedSignatures').value = both[0].join('\n');
                    $('aclApprovedSignatures').value = both[1].join('\n');
                }
                function approveSignature(signature, hash) {
                    mgr.approveSignature(signature, function(r) {
                        updateApprovedSignatures(r);
                    });
                    hideSignature(hash);
                }
                function aclApproveSignature(signature, hash) {
                    mgr.aclApproveSignature(signature, function(r) {
                        updateApprovedSignatures(r);
                    });
                    hideSignature(hash);
                }
                function denySignature(signature, hash) {
                    mgr.denySignature(signature);
                    hideSignature(hash);
                }
                function clearApprovedSignatures() {
                    mgr.clearApprovedSignatures(function(r) {
                        updateApprovedSignatures(r);
                    });
                }
                
                function renderPendingClasspaths(pendingClasspaths) {
                    if (pendingClasspaths.length == 0) {
                        $('pendingClasspaths-none').show();
                        $('pendingClasspaths').childElements().each(function(e){e.remove()});
                        $('pendingClasspaths').hide();
                    } else {
                        $('pendingClasspaths-none').hide();
                        $('pendingClasspaths').childElements().each(function(e){e.remove()});
                        /*
                           Create a list like:
                            <p id="pcp-${pcp.hash}">
                                <button class="approve" onclick="approveClasspath('${pcp.hash}', '${pcp.path}')">Approve</button> /
                                <button class="deny"    onclick="denyClasspath('${pcp.hash}', '${pcp.path}')">Deny</button> 
                                ${pcp.hash} (${pcp.path})
                            </p>
                         */
                        pendingClasspaths.each(function(e) {
                            var block = new Element('p', { 'id': 'pcp-' + e.hash });
                            var approveButton = new Element('button', { 'class': 'approve', 'hash': e.hash, 'path': e.path });
                            approveButton.insert('Approve');
                            approveButton.observe('click', function() {
                                approveClasspath(this.readAttribute('hash'), this.readAttribute('path'));
                            });
                            var denyButton = new Element('button', { 'class': 'deny', 'hash': e.hash, 'path': e.path });
                            denyButton.insert('Deny');
                            denyButton.observe('click', function() {
                                denyClasspath(this.readAttribute('hash'), this.readAttribute('path'));
                            });
                            block.insert(approveButton);
                            block.insert(denyButton);
                            block.insert(e.hash + "(" + e.path + ")");
                            
                            $('pendingClasspaths').insert(block);
                        });
                        $('pendingClasspaths').show();
                    }
                }
                
                function renderApprovedClasspaths(approvedClasspaths) {
                    if (approvedClasspaths.length == 0) {
                        $('approvedClasspaths-none').show();
                        $('approvedClasspaths').childElements().each(function(e){e.remove()});
                        $('approvedClasspaths').hide();
                        $('approvedClasspaths-clear').hide();
                    } else {
                        $('approvedClasspaths-none').hide();
                        $('approvedClasspaths').childElements().each(function(e){e.remove()});
                        /*
                           Create a list like:
                            <p id="acp-${acp.hash}">
                                <button class="delete" onclick="denyApprovedClasspath('${pcp.hash}')">Delete</button> 
                                ${acp.hash} (${acp.path})
                            </p>
                         */
                        approvedClasspaths.each(function(e) {
                            var block = new Element('p', { 'id': 'acp-' + e.hash });
                            var deleteButton = new Element('button', { 'class': 'delete', 'hash': e.hash, 'path': e.path });
                            deleteButton.insert('Delete');
                            deleteButton.observe('click', function() {
                                if (confirm('Really delete this approved classpath? Any existing scripts using this classpath will need to be rerun and classpath reapproved.')) {
                                    denyApprovedClasspath(this.readAttribute('hash'));
                                }
                            });
                            block.insert(deleteButton);
                            block.insert(e.hash + "(" + e.path + ")");
                            
                            $('approvedClasspaths').insert(block);
                        });
                        $('approvedClasspaths').show();
                        $('approvedClasspaths-clear').show();
                    }
                }
                
                function renderClasspaths(r) {
                    renderPendingClasspaths(r.responseObject()[0]);
                    renderApprovedClasspaths(r.responseObject()[1]);
                }
                
                function approveClasspath(hash, path) {
                    mgr.approveClasspath(hash, path, function(r) {
                        renderClasspaths(r);
                    });
                }
                function denyClasspath(hash, path) {
                    mgr.denyClasspath(hash, path, function(r) {
                        renderClasspaths(r);
                    });
                }
                function denyApprovedClasspath(hash) {
                    mgr.denyApprovedClasspath(hash, function(r) {
                        renderClasspaths(r);
                    });
                }
                function clearApprovedClasspaths() {
                    mgr.clearApprovedClasspaths(function(r) {
                        renderClasspaths(r);
                    });
                }
                
                Event.observe(window, "load", function(){
                    mgr.getClasspathRenderInfo(function(r) {
                        renderClasspaths(r);
                    });
                });
            </script>
            <j:choose>
                <j:when test="${it.pendingScripts.isEmpty()}">
                    <p>
                        No pending script approvals.
                    </p>
                </j:when>
                <j:otherwise>
                    <j:forEach var="ps" items="${it.pendingScripts}">
                        <div id="ps-${ps.hash}" class="pending-script">
                            <p class="ps-context">
                                <button onclick="approveScript('${ps.hash}')">Approve</button> / <button onclick="denyScript('${ps.hash}')">Deny</button> ${ps.language.displayName} script
                                <st:include it="${ps.context}" page="index.jelly"/>:
                            </p>
                            <f:textarea readonly="readonly" codemirror-mode="${ps.language.codeMirrorMode}" codemirror-config='"readOnly": true' rows="10" cols="80" value="${ps.script}"/>
                        </div>
                    </j:forEach>
                </j:otherwise>
            </j:choose>
            <p>
                You can also remove all previous script approvals:
                <button onclick="if (confirm('Really delete all approvals? Any existing scripts will need to be requeued and reapproved.')) {mgr.clearApprovedScripts()}">Clear Approvals</button>
            </p>
            <hr/>
            <j:choose>
                <j:when test="${it.pendingSignatures.isEmpty()}">
                    <p>
                        No pending signature approvals.
                    </p>
                </j:when>
                <j:otherwise>
                    <j:forEach var="s" items="${it.pendingSignatures}">
                        <div id="s-${s.hash}">
                            <p>
                                <button onclick="approveSignature('${s.signature}', '${s.hash}')">Approve</button> /
                                <j:if test="${!s.signature.startsWith('field')}">
                                    <button onclick="aclApproveSignature('${s.signature}', '${s.hash}')">Approve assuming permission check</button> /
                                </j:if>
                                <button onclick="denySignature('${s.signature}', '${s.hash}')">Deny</button> signature
                                <st:include it="${s.context}" page="index.jelly"/>:
                                <code>${s.signature}</code>
                            </p>
                        </div>
                    </j:forEach>
                </j:otherwise>
            </j:choose>
            <p>Signatures already approved:</p>
            <textarea readonly="readonly" id="approvedSignatures" rows="10" cols="80">
                <j:forEach var="line" items="${it.approvedSignatures}">${line}<st:out value="&#10;"/></j:forEach>
            </textarea>
            <p>Signatures already approved assuming permission check:</p>
            <textarea readonly="readonly" id="aclApprovedSignatures" rows="10" cols="80">
                <j:forEach var="line" items="${it.aclApprovedSignatures}">${line}<st:out value="&#10;"/></j:forEach>
            </textarea>
            <p>
                You can also remove all previous signature approvals:
                <button onclick="if (confirm('Really delete all approvals? Any existing scripts will need to be rerun and signatures reapproved.')) {clearApprovedSignatures()}">Clear Approvals</button>
            </p>
            <hr/>
            <p id="pendingClasspaths-none">
                No pending classpath approvals.
            </p>
            <div id="pendingClasspaths">
            </div>
            <p>Classpaths already approved:</p>
            <p id="approvedClasspaths-none">
                No approved classpath.
            </p>
            <div id="approvedClasspaths">
            </div>
            <p id="approvedClasspaths-clear">
                You can also remove all previous classpaths approvals:
                <button onclick="if (confirm('Really delete all approvals? Any existing scripts using classpaths will need to be rerun and classpaths reapproved.')) {clearApprovedClasspaths()}">Clear Classpaths</button>
            </p>
        </l:main-panel>
    </l:layout>
</j:jelly>
