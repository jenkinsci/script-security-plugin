<?xml version="1.0" encoding="UTF-8"?>
<!--
The MIT License

Copyright 2014 CloudBees, Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:l="/lib/layout" xmlns:f="/lib/form">
    <l:layout title="In-process Script Approval" permission="${app.ADMINISTER}">
        <st:include page="sidepanel.jelly" it="${app}"/>
        <l:main-panel>
            <st:bind value="${it}" var="mgr"/>
            <st:adjunct includes="org.jenkinsci.plugins.scriptsecurity.scripts.ScriptApproval.script-approval"/>
            <j:choose>
                <j:when test="${it.pendingScripts.isEmpty()}">
                    <p>
                        No pending script approvals.
                    </p>
                </j:when>
                <j:otherwise>
                    <j:forEach var="ps" items="${it.pendingScripts}">
                        <div id="ps-${ps.hash}" class="pending-script">
                            <p class="ps-context">
                                <button class="approve" data-hash="${ps.hash}">Approve</button> / <button class="deny" data-hash="${ps.hash}">Deny</button> ${ps.language.displayName} script
                                <st:include it="${ps.context}" page="index.jelly"/>:
                            </p>
                            <f:textarea readonly="readonly" codemirror-mode="${ps.language.codeMirrorMode}" codemirror-config='"readOnly": true' rows="10" cols="80" value="${ps.script}"/>
                        </div>
                    </j:forEach>
                </j:otherwise>
            </j:choose>
            <j:if test="${it.hasDeprecatedApprovedScriptHashes()}">
                <p id="deprecated-approvedScripts-clear">
                    You have <st:out value="${it.countDeprecatedApprovedScriptHashes()}"/> script approvals with deprecated hashes:
                    <button>Clear Deprecated Approvals</button>
                </p>
                <p class="setting-description">
                    Script approvals are stored in Jenkins as the hashed value of the script. Old approvals were hashed using SHA-1, which is deprecated.
                    Because only the hash of the script is stored, they cannot be immediately converted to use a new hash algorithm. Instead, they will be automatically rehashed when the script is next used.
                    To minimize potential security risks, you can immediately revoke all script approvals that were hashed using SHA-1. <strong>This will cause all jobs and features that use those scripts to fail until they are reconfigured and then approved by a Jenkins administrator.</strong>
                </p>
            </j:if>
            <p id="approvedScripts-clear">
                You can also remove all previous script approvals:
                <button>Clear Approvals</button>
            </p>
            <hr/>
            <j:choose>
                <j:when test="${it.pendingSignatures.isEmpty()}">
                    <p>
                        No pending signature approvals.
                    </p>
                </j:when>
                <j:otherwise>
                    <j:forEach var="s" items="${it.pendingSignatures}">
                        <div id="s-${s.hash}">
                            <p class="s-context">
                                <button data-signature="${s.signature}" data-hash="${s.hash}" class="approve">Approve</button> /
                                <j:if test="${!s.signature.startsWith('field')}">
                                    <button data-signature="${s.signature}" data-hash="${s.hash}" class="acl-approve">Approve assuming permission check</button> /
                                </j:if>
                                <button data-signature="${s.signature}" data-hash="${s.hash}" class="deny">Deny</button> signature
                                <st:include it="${s.context}" page="index.jelly"/>:
                                <code>${s.signature}</code>
                                <j:if test="${s.dangerous}">
                                    <st:nbsp/><strong><font color="red">Approving this signature may introduce a security vulnerability! You are advised to deny it.</font></strong>
                                </j:if>
                            </p>
                        </div>
                    </j:forEach>
                </j:otherwise>
            </j:choose>
            <p>Signatures already approved:</p>
            <br/>
            <textarea readonly="readonly" id="approvedSignatures" rows="10" cols="80">
                <j:forEach var="line" items="${it.approvedSignatures}">${line}<st:out value="&#10;"/></j:forEach>
            </textarea>
            <p>Signatures already approved assuming permission check:</p>
            <br/>
            <textarea readonly="readonly" id="aclApprovedSignatures" rows="10" cols="80">
                <j:forEach var="line" items="${it.aclApprovedSignatures}">${line}<st:out value="&#10;"/></j:forEach>
            </textarea>
            <j:set var="dangerousApprovedSignatures" value="${it.dangerousApprovedSignatures}"/>
            <j:if test="${!empty(dangerousApprovedSignatures)}">
                <p>Signatures already approved which <strong><font color="red">may have introduced a security vulnerability</font></strong> (recommend clearing):</p>
                <br/>
                <textarea readonly="readonly" id="dangerousApprovedSignatures" rows="10" cols="80">
                    <j:forEach var="line" items="${dangerousApprovedSignatures}">${line}<st:out value="&#10;"/></j:forEach>
                </textarea>
            </j:if>
            <p id="approvedSignatures-clear">
                You can also remove all previous signature approvals:
                <button>Clear Approvals</button>
            </p>
            <j:if test="${!empty(dangerousApprovedSignatures)}">
                <p id="dangerousApprovedSignatures-clear">
                    Or you can just remove the dangerous ones:
                    <button>Clear only dangerous Approvals</button>
                </p>
            </j:if>
            <hr/>
            <p id="pendingClasspathEntries-none">
                No pending classpath entry approvals.
            </p>
            <div id="pendingClasspathEntries">
                Classpath entries pending approval. (Beware of remote URLs, workspace files, or anything else that might change without your notice.)
            </div>
            <p>Classpath entries already approved:</p>
            <p id="approvedClasspathEntries-none">
                No approved classpath entries.
            </p>
            <div id="approvedClasspathEntries">
            </div>
            <j:if test="${it.hasDeprecatedApprovedClasspathHashes()}">
                <p id="deprecated-approvedClasspaths-clear">
                    You have ${it.countDeprecatedApprovedClasspathHashes()} approved classpath entries with deprecated hashes:
                    <span id="deprecated-approvedClasspaths-clear-btn">
                        <button>Rehash Deprecated Approvals</button>
                    </span>
                    <span id="deprecated-approvedClasspaths-clear-spinner">
                        <l:icon alt="${%Converting...}" class="${it.spinnerIconClassName} icon-md"/>
                    </span>
                </p>
                <p class="setting-description">
                    Approved classpath entries are stored in Jenkins with the URL and the hashed content of the resource the URL refers to. Old approvals were hashed using SHA-1, which is deprecated.
                    Because the URL is known they can be rehashed in bulk, but that might take time, so they will each be rehashed when next used to not cause any disruption.
                    To minimize potential security risks, you can schedule a background task to automatically convert all existing approved classpath entries to the new hash format.
                </p>
                <j:choose>
                    <j:when test="${it.isConvertingDeprecatedApprovedClasspathEntries()}">
                        <st:adjunct includes="org.jenkinsci.plugins.scriptsecurity.scripts.ScriptApproval.deprecated-approvedClasspaths-clear-btn-hide"/>
                    </j:when>
                    <j:otherwise>
                        <st:adjunct includes="org.jenkinsci.plugins.scriptsecurity.scripts.ScriptApproval.deprecated-approvedClasspaths-clear-btn-show"/>
                    </j:otherwise>
                </j:choose>
            </j:if>
            <p id="approvedClasspathEntries-clear">
                You can also remove all previous classpath entry approvals:
                <button>Clear Classpath Entries</button>
            </p>
        </l:main-panel>
    </l:layout>
</j:jelly>
